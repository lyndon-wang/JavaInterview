## 1、gRPC元数据（metadata）

1. 元数据是有关特定 RPC 调用的信息（例如[身份验证详细信息](https://grpc.io/docs/guides/auth/)），采用键值对列表的形式，其中键是字符串，值通常是字符串，但也可以是二进制数据。
2. 键不区分大小写，由 ASCII 字母、数字和特殊字符`-`、 、 组成`_`， `.`并且不能以`grpc-`（为 gRPC 本身保留）开头。二进制值的键以 ASCII 值的键结束，`-bin`而 ASCII 值的键则没有。
3. 元数据对 gRPC 本身是不透明的——它允许客户端提供与服务器调用相关的信息，反之亦然。
4. 对元数据的访问取决于语言。

## 2、为什么不使用tomcat

Tomcat服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，对于中台道具服务来说在高并发的情况下性能不是很好，无法做到快速响应。对于中台道具服务来说不需要web环境，只需要一个容器可以长时间的响应外部请求即可，所以gRPC是一个很好的选择，可以把gRPC当做是我们的容器用来响应外部请求。（性能方面的比较？为什么gRPC更快？快在哪里？两者通信都是基于netty。待补充）

## 3、为什么项目中中间件用的很少

一切都是以快速响应作为出发点，项目中不管是组件亦或是依赖库都尽可能的做到精简，不冗余，目的就是为了让服务更快，也更方便问题的排查，中间件用的越少，把控能力就越强，出错了问题定位越容易；如果用了很多中间件，不但服务变得很臃肿，而且很有可能问题出在中间件上，这时候问题排查以及修改就比较麻烦，所以中间件不能为了用而用，要考虑到这个中间件是否真的有必要用（果然是大道至简）。